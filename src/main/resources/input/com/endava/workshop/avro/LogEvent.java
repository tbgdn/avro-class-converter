/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.endava.workshop.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class LogEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5523313749812319132L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"LogEvent\",\"namespace\":\"com.endava.workshop.avro\",\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"sourceSystem\",\"type\":\"string\"},{\"name\":\"message\",\"type\":\"string\"},{\"name\":\"createdDate\",\"type\":{\"type\":\"int\",\"logicalType\":\"date\"}},{\"name\":\"createdTime\",\"type\":{\"type\":\"int\",\"logicalType\":\"time-millis\"}},{\"name\":\"level\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.DateConversion());
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimeMillisConversion());
  }

  private static final BinaryMessageEncoder<LogEvent> ENCODER =
      new BinaryMessageEncoder<LogEvent>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<LogEvent> DECODER =
      new BinaryMessageDecoder<LogEvent>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<LogEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<LogEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<LogEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<LogEvent>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this LogEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a LogEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a LogEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static LogEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence id;
  @Deprecated public java.lang.CharSequence sourceSystem;
  @Deprecated public java.lang.CharSequence message;
  @Deprecated public java.time.LocalDate createdDate;
  @Deprecated public java.time.LocalTime createdTime;
  @Deprecated public int level;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public LogEvent() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param sourceSystem The new value for sourceSystem
   * @param message The new value for message
   * @param createdDate The new value for createdDate
   * @param createdTime The new value for createdTime
   * @param level The new value for level
   */
  public LogEvent(java.lang.CharSequence id, java.lang.CharSequence sourceSystem, java.lang.CharSequence message, java.time.LocalDate createdDate, java.time.LocalTime createdTime, java.lang.Integer level) {
    this.id = id;
    this.sourceSystem = sourceSystem;
    this.message = message;
    this.createdDate = createdDate;
    this.createdTime = createdTime.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.level = level;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
      case 0: return id;
      case 1: return sourceSystem;
      case 2: return message;
      case 3: return createdDate;
      case 4: return createdTime;
      case 5: return level;
      default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
          null,
          null,
          null,
          new org.apache.avro.data.TimeConversions.DateConversion(),
          new org.apache.avro.data.TimeConversions.TimeMillisConversion(),
          null,
          null
      };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
      case 0: id = (java.lang.CharSequence)value$; break;
      case 1: sourceSystem = (java.lang.CharSequence)value$; break;
      case 2: message = (java.lang.CharSequence)value$; break;
      case 3: createdDate = (java.time.LocalDate)value$; break;
      case 4: createdTime = (java.time.LocalTime)value$; break;
      case 5: level = (java.lang.Integer)value$; break;
      default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.CharSequence getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'sourceSystem' field.
   * @return The value of the 'sourceSystem' field.
   */
  public java.lang.CharSequence getSourceSystem() {
    return sourceSystem;
  }


  /**
   * Sets the value of the 'sourceSystem' field.
   * @param value the value to set.
   */
  public void setSourceSystem(java.lang.CharSequence value) {
    this.sourceSystem = value;
  }

  /**
   * Gets the value of the 'message' field.
   * @return The value of the 'message' field.
   */
  public java.lang.CharSequence getMessage() {
    return message;
  }


  /**
   * Sets the value of the 'message' field.
   * @param value the value to set.
   */
  public void setMessage(java.lang.CharSequence value) {
    this.message = value;
  }

  /**
   * Gets the value of the 'createdDate' field.
   * @return The value of the 'createdDate' field.
   */
  public java.time.LocalDate getCreatedDate() {
    return createdDate;
  }


  /**
   * Sets the value of the 'createdDate' field.
   * @param value the value to set.
   */
  public void setCreatedDate(java.time.LocalDate value) {
    this.createdDate = value;
  }

  /**
   * Gets the value of the 'createdTime' field.
   * @return The value of the 'createdTime' field.
   */
  public java.time.LocalTime getCreatedTime() {
    return createdTime;
  }


  /**
   * Sets the value of the 'createdTime' field.
   * @param value the value to set.
   */
  public void setCreatedTime(java.time.LocalTime value) {
    this.createdTime = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Gets the value of the 'level' field.
   * @return The value of the 'level' field.
   */
  public int getLevel() {
    return level;
  }


  /**
   * Sets the value of the 'level' field.
   * @param value the value to set.
   */
  public void setLevel(int value) {
    this.level = value;
  }

  /**
   * Creates a new LogEvent RecordBuilder.
   * @return A new LogEvent RecordBuilder
   */
  public static com.endava.workshop.avro.LogEvent.Builder newBuilder() {
    return new com.endava.workshop.avro.LogEvent.Builder();
  }

  /**
   * Creates a new LogEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new LogEvent RecordBuilder
   */
  public static com.endava.workshop.avro.LogEvent.Builder newBuilder(com.endava.workshop.avro.LogEvent.Builder other) {
    if (other == null) {
      return new com.endava.workshop.avro.LogEvent.Builder();
    } else {
      return new com.endava.workshop.avro.LogEvent.Builder(other);
    }
  }

  /**
   * Creates a new LogEvent RecordBuilder by copying an existing LogEvent instance.
   * @param other The existing instance to copy.
   * @return A new LogEvent RecordBuilder
   */
  public static com.endava.workshop.avro.LogEvent.Builder newBuilder(com.endava.workshop.avro.LogEvent other) {
    if (other == null) {
      return new com.endava.workshop.avro.LogEvent.Builder();
    } else {
      return new com.endava.workshop.avro.LogEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for LogEvent instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<LogEvent>
      implements org.apache.avro.data.RecordBuilder<LogEvent> {

    private java.lang.CharSequence id;
    private java.lang.CharSequence sourceSystem;
    private java.lang.CharSequence message;
    private java.time.LocalDate createdDate;
    private java.time.LocalTime createdTime;
    private int level;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.endava.workshop.avro.LogEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.sourceSystem)) {
        this.sourceSystem = data().deepCopy(fields()[1].schema(), other.sourceSystem);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.message)) {
        this.message = data().deepCopy(fields()[2].schema(), other.message);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.createdDate)) {
        this.createdDate = data().deepCopy(fields()[3].schema(), other.createdDate);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.createdTime)) {
        this.createdTime = data().deepCopy(fields()[4].schema(), other.createdTime);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.level)) {
        this.level = data().deepCopy(fields()[5].schema(), other.level);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing LogEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(com.endava.workshop.avro.LogEvent other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sourceSystem)) {
        this.sourceSystem = data().deepCopy(fields()[1].schema(), other.sourceSystem);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.message)) {
        this.message = data().deepCopy(fields()[2].schema(), other.message);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.createdDate)) {
        this.createdDate = data().deepCopy(fields()[3].schema(), other.createdDate);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.createdTime)) {
        this.createdTime = data().deepCopy(fields()[4].schema(), other.createdTime);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.level)) {
        this.level = data().deepCopy(fields()[5].schema(), other.level);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Gets the value of the 'id' field.
     * @return The value.
     */
    public java.lang.CharSequence getId() {
      return id;
    }


    /**
     * Sets the value of the 'id' field.
     * @param value The value of 'id'.
     * @return This builder.
     */
    public com.endava.workshop.avro.LogEvent.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
     * Checks whether the 'id' field has been set.
     * @return True if the 'id' field has been set, false otherwise.
     */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
     * Clears the value of the 'id' field.
     * @return This builder.
     */
    public com.endava.workshop.avro.LogEvent.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
     * Gets the value of the 'sourceSystem' field.
     * @return The value.
     */
    public java.lang.CharSequence getSourceSystem() {
      return sourceSystem;
    }


    /**
     * Sets the value of the 'sourceSystem' field.
     * @param value The value of 'sourceSystem'.
     * @return This builder.
     */
    public com.endava.workshop.avro.LogEvent.Builder setSourceSystem(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.sourceSystem = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
     * Checks whether the 'sourceSystem' field has been set.
     * @return True if the 'sourceSystem' field has been set, false otherwise.
     */
    public boolean hasSourceSystem() {
      return fieldSetFlags()[1];
    }


    /**
     * Clears the value of the 'sourceSystem' field.
     * @return This builder.
     */
    public com.endava.workshop.avro.LogEvent.Builder clearSourceSystem() {
      sourceSystem = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
     * Gets the value of the 'message' field.
     * @return The value.
     */
    public java.lang.CharSequence getMessage() {
      return message;
    }


    /**
     * Sets the value of the 'message' field.
     * @param value The value of 'message'.
     * @return This builder.
     */
    public com.endava.workshop.avro.LogEvent.Builder setMessage(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.message = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
     * Checks whether the 'message' field has been set.
     * @return True if the 'message' field has been set, false otherwise.
     */
    public boolean hasMessage() {
      return fieldSetFlags()[2];
    }


    /**
     * Clears the value of the 'message' field.
     * @return This builder.
     */
    public com.endava.workshop.avro.LogEvent.Builder clearMessage() {
      message = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
     * Gets the value of the 'createdDate' field.
     * @return The value.
     */
    public java.time.LocalDate getCreatedDate() {
      return createdDate;
    }


    /**
     * Sets the value of the 'createdDate' field.
     * @param value The value of 'createdDate'.
     * @return This builder.
     */
    public com.endava.workshop.avro.LogEvent.Builder setCreatedDate(java.time.LocalDate value) {
      validate(fields()[3], value);
      this.createdDate = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
     * Checks whether the 'createdDate' field has been set.
     * @return True if the 'createdDate' field has been set, false otherwise.
     */
    public boolean hasCreatedDate() {
      return fieldSetFlags()[3];
    }


    /**
     * Clears the value of the 'createdDate' field.
     * @return This builder.
     */
    public com.endava.workshop.avro.LogEvent.Builder clearCreatedDate() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
     * Gets the value of the 'createdTime' field.
     * @return The value.
     */
    public java.time.LocalTime getCreatedTime() {
      return createdTime;
    }


    /**
     * Sets the value of the 'createdTime' field.
     * @param value The value of 'createdTime'.
     * @return This builder.
     */
    public com.endava.workshop.avro.LogEvent.Builder setCreatedTime(java.time.LocalTime value) {
      validate(fields()[4], value);
      this.createdTime = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
     * Checks whether the 'createdTime' field has been set.
     * @return True if the 'createdTime' field has been set, false otherwise.
     */
    public boolean hasCreatedTime() {
      return fieldSetFlags()[4];
    }


    /**
     * Clears the value of the 'createdTime' field.
     * @return This builder.
     */
    public com.endava.workshop.avro.LogEvent.Builder clearCreatedTime() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
     * Gets the value of the 'level' field.
     * @return The value.
     */
    public int getLevel() {
      return level;
    }


    /**
     * Sets the value of the 'level' field.
     * @param value The value of 'level'.
     * @return This builder.
     */
    public com.endava.workshop.avro.LogEvent.Builder setLevel(int value) {
      validate(fields()[5], value);
      this.level = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
     * Checks whether the 'level' field has been set.
     * @return True if the 'level' field has been set, false otherwise.
     */
    public boolean hasLevel() {
      return fieldSetFlags()[5];
    }


    /**
     * Clears the value of the 'level' field.
     * @return This builder.
     */
    public com.endava.workshop.avro.LogEvent.Builder clearLevel() {
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public LogEvent build() {
      try {
        LogEvent record = new LogEvent();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.sourceSystem = fieldSetFlags()[1] ? this.sourceSystem : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.message = fieldSetFlags()[2] ? this.message : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.createdDate = fieldSetFlags()[3] ? this.createdDate : (java.time.LocalDate) defaultValue(fields()[3]);
        record.createdTime = fieldSetFlags()[4] ? this.createdTime : (java.time.LocalTime) defaultValue(fields()[4]);
        record.level = fieldSetFlags()[5] ? this.level : (java.lang.Integer) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<LogEvent>
      WRITER$ = (org.apache.avro.io.DatumWriter<LogEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
      throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<LogEvent>
      READER$ = (org.apache.avro.io.DatumReader<LogEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
      throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










